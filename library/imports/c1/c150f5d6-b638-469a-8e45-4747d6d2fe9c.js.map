{"version":3,"sources":["assets\\scripts\\Player.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","type","AudioClip","runJumpAction","jumpUp","tween","by","y","easing","jumpDown","sequence","call","playJumpSound","repeatForever","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onLoad","jumpAction","node","then","start","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","update","dt","s","Math","abs","x"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACAC,IAAAA,UAAU,EAAE,CAFJ;AAGR;AACAC,IAAAA,YAAY,EAAE,CAJN;AAKR;AACAC,IAAAA,YAAY,EAAE,CANN;AAOR;AACAC,IAAAA,KAAK,EAAE,CARC;AAUR;AACAC,IAAAA,SAAS,EAAE;AACP,iBAAS,IADF;AAEPC,MAAAA,IAAI,EAAET,EAAE,CAACU;AAFF,KAXH,CAiBR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/BQ,GAHP;AAoCLC,EAAAA,aAAa,EAAE,yBAAY;AACvB;AACA,QAAIC,MAAM,GAAGZ,EAAE,CAACa,KAAH,GAAWC,EAAX,CAAc,KAAKT,YAAnB,EAAiC;AAAEU,MAAAA,CAAC,EAAE,KAAKX;AAAV,KAAjC,EAAyD;AAAEY,MAAAA,MAAM,EAAE;AAAV,KAAzD,CAAb,CAFuB,CAIvB;;AACA,QAAIC,QAAQ,GAAGjB,EAAE,CAACa,KAAH,GAAWC,EAAX,CAAc,KAAKT,YAAnB,EAAiC;AAAEU,MAAAA,CAAC,EAAE,CAAC,KAAKX;AAAX,KAAjC,EAA0D;AAAEY,MAAAA,MAAM,EAAE;AAAV,KAA1D,CAAf,CALuB,CAOvB;;AACA,QAAIH,KAAK,GAAGb,EAAE,CAACa,KAAH,GACR;AADQ,KAEPK,QAFO,CAEEN,MAFF,EAEUK,QAFV,EAGR;AAHQ,KAIPE,IAJO,CAIF,KAAKC,aAJH,EAIkB,IAJlB,CAAZ,CARuB,CAcvB;;AACA,WAAOpB,EAAE,CAACa,KAAH,GAAWQ,aAAX,CAAyBR,KAAzB,CAAP;AACH,GApDI;AAqDLO,EAAAA,aAAa,EAAE,yBAAY;AACvB;AACApB,IAAAA,EAAE,CAACsB,WAAH,CAAeC,UAAf,CAA0B,KAAKf,SAA/B,EAA0C,KAA1C;AACH,GAxDI;AA0DLgB,EAAAA,SA1DK,qBA0DKC,KA1DL,EA0DY;AACb;AACA,YAAQA,KAAK,CAACC,OAAd;AACI,WAAK1B,EAAE,CAAC2B,KAAH,CAASC,GAAT,CAAaC,CAAlB;AACI,aAAKC,OAAL,GAAe,IAAf;AACA;;AACJ,WAAK9B,EAAE,CAAC2B,KAAH,CAASC,GAAT,CAAaG,CAAlB;AACI,aAAKC,QAAL,GAAgB,IAAhB;AACA;AANR;AAQH,GApEI;AAsELC,EAAAA,OAtEK,mBAsEGR,KAtEH,EAsEU;AACX;AACA,YAAQA,KAAK,CAACC,OAAd;AACI,WAAK1B,EAAE,CAAC2B,KAAH,CAASC,GAAT,CAAaC,CAAlB;AACI,aAAKC,OAAL,GAAe,KAAf;AACA;;AACJ,WAAK9B,EAAE,CAAC2B,KAAH,CAASC,GAAT,CAAaG,CAAlB;AACI,aAAKC,QAAL,GAAgB,KAAhB;AACA;AANR;AAQH,GAhFI;AAkFL;AAEAE,EAAAA,MApFK,oBAoFI;AACL;AACA,QAAIC,UAAU,GAAG,KAAKxB,aAAL,EAAjB;AACAX,IAAAA,EAAE,CAACa,KAAH,CAAS,KAAKuB,IAAd,EAAoBC,IAApB,CAAyBF,UAAzB,EAAqCG,KAArC,GAHK,CAKL;;AACA,SAAKR,OAAL,GAAe,KAAf;AACA,SAAKE,QAAL,GAAgB,KAAhB,CAPK,CAQL;;AACA,SAAKO,MAAL,GAAc,CAAd,CATK,CAWL;;AACAvC,IAAAA,EAAE,CAACwC,WAAH,CAAeC,EAAf,CAAkBzC,EAAE,CAAC0C,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,KAAKpB,SAA1D,EAAqE,IAArE;AACAxB,IAAAA,EAAE,CAACwC,WAAH,CAAeC,EAAf,CAAkBzC,EAAE,CAAC0C,WAAH,CAAeC,SAAf,CAAyBE,MAA3C,EAAmD,KAAKZ,OAAxD,EAAiE,IAAjE;AACH,GAlGI;AAoGLa,EAAAA,SApGK,uBAoGO;AACR;AACA9C,IAAAA,EAAE,CAACwC,WAAH,CAAeO,GAAf,CAAmB/C,EAAE,CAAC0C,WAAH,CAAeC,SAAf,CAAyBC,QAA5C,EAAsD,KAAKpB,SAA3D,EAAsE,IAAtE;AACAxB,IAAAA,EAAE,CAACwC,WAAH,CAAeO,GAAf,CAAmB/C,EAAE,CAAC0C,WAAH,CAAeC,SAAf,CAAyBE,MAA5C,EAAoD,KAAKZ,OAAzD,EAAkE,IAAlE;AACH,GAxGI;AA0GLK,EAAAA,KA1GK,mBA0GG,CAEP,CA5GI;AA8GL;AAIAU,EAAAA,MAlHK,kBAkHEC,EAlHF,EAkHM;AACP;AACA,QAAIC,CAAC,GAAG,KAAKX,MAAb;;AACA,QAAI,KAAKT,OAAT,EAAkB;AACd,WAAKS,MAAL,IAAe,KAAKhC,KAAL,GAAa0C,EAA5B;AACH,KAFD,MAEO,IAAI,KAAKjB,QAAT,EAAmB;AACtB,WAAKO,MAAL,IAAe,KAAKhC,KAAL,GAAa0C,EAA5B;AACH,KAPM,CAQP;;;AACA,QAAIE,IAAI,CAACC,GAAL,CAAS,KAAKb,MAAd,IAAwB,KAAKjC,YAAjC,EAA+C;AAC3C;AACA,WAAKiC,MAAL,GAAc,KAAKjC,YAAL,GAAoB,KAAKiC,MAAzB,GAAkCY,IAAI,CAACC,GAAL,CAAS,KAAKb,MAAd,CAAhD;AACH,KAZM,CAcP;AACA;;;AACA,SAAKH,IAAL,CAAUiB,CAAV,IAAe,CAACH,CAAC,GAAG,KAAKX,MAAV,IAAoBU,EAApB,GAAyB,CAAxC;AACH;AAnII,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // Main character's jump height\r\n        jumpHeight: 0,\r\n        // Main character's jump duration\r\n        jumpDuration: 0,\r\n        // Maximal movement speed\r\n        maxMoveSpeed: 0,\r\n        // Acceleration\r\n        accel: 0,\r\n\r\n        // Jumping sound effect resource\r\n        jumpAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n\r\n\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n    runJumpAction: function () {\r\n        // Jump up\r\n        var jumpUp = cc.tween().by(this.jumpDuration, { y: this.jumpHeight }, { easing: 'sineOut' });\r\n\r\n        // Jump down\r\n        var jumpDown = cc.tween().by(this.jumpDuration, { y: -this.jumpHeight }, { easing: 'sineIn' });\r\n\r\n        // Create a easing\r\n        var tween = cc.tween()\r\n            // perform actions in the order of \"jumpUp\", \"jumpDown\"\r\n            .sequence(jumpUp, jumpDown)\r\n            // Add a callback function to invoke the \"playJumpSound()\" method we define after the action is finished\r\n            .call(this.playJumpSound, this);\r\n\r\n        // Repeat unceasingly\r\n        return cc.tween().repeatForever(tween);\r\n    },\r\n    playJumpSound: function () {\r\n        // Invoke sound engine to play the sound\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n\r\n    onKeyDown(event) {\r\n        // Set a flag when key pressed\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onKeyUp(event) {\r\n        // Unset a flag when key released\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        // Initialize jump action\r\n        var jumpAction = this.runJumpAction();\r\n        cc.tween(this.node).then(jumpAction).start()\r\n\r\n        // Acceleration direction switch\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // The main character's current horizontal velocity\r\n        this.xSpeed = 0;\r\n\r\n        // Initialize the keyboard input listening\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n\r\n    onDestroy() {\r\n        // Cancel keyboard input monitoring\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n\r\n    start() {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n\r\n\r\n\r\n    update(dt) {\r\n        // Update speed of each frame according to the current acceleration direction\r\n        let s = this.xSpeed;\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // Restrict the movement speed of the main character to the maximum movement speed\r\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\r\n            // If speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // Update the position of the main character according to the current speed\r\n        // this.node.x += this.xSpeed * dt;\r\n        this.node.x += (s + this.xSpeed) * dt / 2;\r\n    },\r\n});\r\n"]}